//30-3-2023

//Binary search

given arr must be sort
take mid term sorting  

//35. Search Insert Position
function(nums, x) {
  var n=nums.length

  if(x<nums[0]){         //x is less than first arr ele then return first index
      return 0
  }
  if(x>nums[n-1]){      //x is greater than last arr ele then return last index
      return n
  }
  
  var l=0
  var r=n-1
  var ans=-1
  while(l<=r){
      var mid=Math.floor((l+r)/2)
      if(x==nums[mid]){
          ans=mid
           break  }
      else if(nums[mid]<x){
          ans=mid+1
          l=mid+1}
      else{r=mid-1}
  }
  return ans
  
};


//2-4-2023

//670. Maximum Swap
var maximumSwap = function(num) {
   let s=num.toString();                                //toString()
   let sorted=s.split('').sort((a,b)=>b-a).join('');    //sorting
   
   if(num<10) return num                                //base case
   if(s==sorted) return num                             //for already sorted num
   
  let ans=null
  for(let i=0;i<s.length;i++){                          //string
    if(s[i]==sorted[i]){                                //if some number are soretd & some no. are not sorted
          continue}
    else{
        ans=s.split('')                                //array
        let index = ans.lastIndexOf(sorted[i])
        ans[index]=s[i]
        ans[i]=sorted[i]                               // swap
        break}
  }
    return ans.join('')
}





//find given number x in array
 function FindNum(arr,x){
    let l=0                      //left
    let r=arr.length-1           //right
    let ans=-1
  
  while(l<=r){
      let mid=parseInt((l+r)/2)
      if(x==arr[mid]){         //mid
          ans=mid
          break   
      }
      else if(x>arr[mid]){     //right
          l=mid+1
      }
      else{
          r=mid-1             //left
      }
   }
   
     if(ans!=-1){console.log(x,"is present at index",ans)}
     else{console.log(x,"is not present")}
  }
  

  //704. Binary Search
    //find index of given number
  function(nums, target) {
      let l=0                               //left
      let r=nums.length-1                   //right
    
    while(l<=r){                           //if only one ele is present in arr then l=r cond
        let mid=Math.floor((l+r)/2)        //mid term in binary
        
        if(nums[mid]==target){             //mid term= target
            return mid
        }
        else if(nums[mid]<target){         //mid term <target
            l=mid+1
        }
        else{                              //mid term >target
            r=mid-1
        }
    }
    return -1                              //if terget ele not present then -1
};

  // Find given number x in array 
  //using binary search  &  recursive method

   function binary_search(arr,n,x,l,r){
    //base
    if(l>r) return false
    
    //recursive case
   let mid=parseInt((l+r)/2)
    if(x==arr[mid]){
        return mid
    }
    else if(x>arr[mid]){                    //right
          binary_search(arr,n,x,mid+1,r)
    }
    else{                                   //left
        binary_search(arr,n,x,l,mid-1)
    }
}

  let arr=[1,2,3,8,9,12,40,50]
  let n=9
  let x=12
  let l=0
  let r=arr.length-1
  console.log(binary_search(arr,n,x,l,r))
  

  //69. Sqrt(x)
  function(x) {
    var l=1;                                //In sq take l=1
    var r=x
    var ans=0
    
    while(l<=r){                           //In binary take l<=r
        var mid=Math.floor((l+r)/2)      
        if(mid*mid==x){                    //if x is square of mid term
            ans=mid
            break;
            }
        else if(mid*mid<x){                //sq of mid < x
            ans=mid
            l=mid+1
        }
        else{                              //sq mid > x
            r=mid-1
        }
    }
    return ans
};
 
//81. Search in Rotated Sorted Array II --> find target --> i.e use ofsearchin algorithm

function(nums, target) {
  let l = 0;
  let r = nums.length - 1
  while(l<=r){                                        //In binary l<=r
      let mid = Math.floor((l+r)/2)                    
      if(nums[mid] === target)                         //1st cond ckeck mid=target
          return true
      
      // duplicate case
      if(nums[l] === nums[mid] && nums[r] === nums[mid]){
          l += 1
          r -= 1
      }
      // left sorted portion
      else if(nums[l] <= nums[mid]){
          if(nums[l] <= target && target < nums[mid]){
              r = mid - 1
          } else {
              l = mid + 1
          }
      } 
      // right sorted portion
      else {
          if(nums[mid] < target && target <= nums[r]) {
              l = mid + 1
          } else {
              r = mid - 1
          }
      }
  }

  return false
};



//Use binary search for sorting two array in increasing order //using iterative method

let a=[2,5,8,9]
let b=[3,4,7]

var n=a.length,m=b.length
let c = new Array(m+n)

let i=0,j=0,k=0
while(i<n&&j<m){
    if(a[i]<b[j]){
        c[k]=a[i]
        i++
        k++
    }
    else{
        c[k]=b[j]
        k++
        j++
    }
}

while(i<n){
    c[k]=a[i]
    i++
    k++
}

while(j<m){
    c[k]=b[j]
    k++
    j++
}

console.log(c);
